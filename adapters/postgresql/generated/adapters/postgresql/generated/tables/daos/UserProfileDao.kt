/*
 * This file is generated by jOOQ.
 */
package adapters.postgresql.generated.tables.daos


import adapters.postgresql.generated.tables.UserProfile
import adapters.postgresql.generated.tables.records.UserProfileRecord

import java.time.LocalDate
import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserProfileDao(configuration: Configuration?) : DAOImpl<UserProfileRecord, adapters.postgresql.generated.tables.pojos.UserProfile, String>(UserProfile.USER_PROFILE, adapters.postgresql.generated.tables.pojos.UserProfile::class.java, configuration) {

    /**
     * Create a new UserProfileDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: adapters.postgresql.generated.tables.pojos.UserProfile): String = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: String, upperInclusive: String): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetchRange(UserProfile.USER_PROFILE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: String): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetch(UserProfile.USER_PROFILE.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: String): adapters.postgresql.generated.tables.pojos.UserProfile? = fetchOne(UserProfile.USER_PROFILE.ID, value)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String, upperInclusive: String): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetchRange(UserProfile.USER_PROFILE.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetch(UserProfile.USER_PROFILE.EMAIL, *values)

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    fun fetchOneByEmail(value: String): adapters.postgresql.generated.tables.pojos.UserProfile? = fetchOne(UserProfile.USER_PROFILE.EMAIL, value)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPassword(lowerInclusive: String, upperInclusive: String): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetchRange(UserProfile.USER_PROFILE.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByPassword(vararg values: String): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetch(UserProfile.USER_PROFILE.PASSWORD, *values)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String?, upperInclusive: String?): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetchRange(UserProfile.USER_PROFILE.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetch(UserProfile.USER_PROFILE.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>birthday_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfBirthdayDate(lowerInclusive: LocalDate?, upperInclusive: LocalDate?): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetchRange(UserProfile.USER_PROFILE.BIRTHDAY_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>birthday_date IN (values)</code>
     */
    fun fetchByBirthdayDate(vararg values: LocalDate): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetch(UserProfile.USER_PROFILE.BIRTHDAY_DATE, *values)

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreateTime(lowerInclusive: OffsetDateTime, upperInclusive: OffsetDateTime): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetchRange(UserProfile.USER_PROFILE.CREATE_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    fun fetchByCreateTime(vararg values: OffsetDateTime): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetch(UserProfile.USER_PROFILE.CREATE_TIME, *values)

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdateTime(lowerInclusive: OffsetDateTime, upperInclusive: OffsetDateTime): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetchRange(UserProfile.USER_PROFILE.UPDATE_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    fun fetchByUpdateTime(vararg values: OffsetDateTime): List<adapters.postgresql.generated.tables.pojos.UserProfile> = fetch(UserProfile.USER_PROFILE.UPDATE_TIME, *values)
}
